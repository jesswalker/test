// ===============================================
// DSWE 2.0 Monthly Composites
// ===============================================
// 
// Some text added here to test out git/github 
// Now on a new branch making changes
// 
// DSWE2_0_monthly_composites
//
// This script creates monthly composites of Dynamic Surface Water Extent (DSWE) v2.0 products: 
// categories of ground surface inundation as detected in cloud-/shadow-/snow-free 
// Landsat pixels. Where multiple values are returned for pixels within a month,
// higher-confidence water categories take precedence over lower/partial ones, while water 
// or no-water categories dominate cloudy pixels. Algorithm and approach were originally 
// derived from JJones's 2015 DSWE Algorithm Description pdf and updated to match changes in 
// June 2018 DSWE v2.0 documentation.
//
// DSWE v1.0 coding: Jess Walker 
// DSWE v2.0 coding: Jason Kreitler, Roy Petrakis, Chris Soulard, Jess Walker
// December 2018
//
// Edits:
//
// Feb 2019: Updates to match Version 2.0 October 2018 Product Guide
// - Added hillshade component with threshold (110 per communication w/ John Jones)
// - Output to EPSG5070 (Albers Equal Area Conic) to match ARD specs
// - Corrected MNDWI threshold value
// - Substituted 1/3 arc-second DEM for 30-m SRTM DEM
// JWalker
//
// Mar 2019: 
// - Monthly composite hillshade determined on per-scene basis rather than universally applied
//   using default values
// - Hillshaded pixels set to 9 instead of 0
// JWalker
//
//
// May 2020:
// - Recoded slope so that any class with slope > 16.7 is masked
// - Corrected remapping scheme such that 0 (no water) is selected after the water classes in compositing
// - Transferred aoi and dem imports to scripts
// JWalker
//
// -------------------------------------------
// Input: User-supplied date range (within Landsat TM availability)
// Output: Single multi-band image of monthly DSWE composites as a GEE Asset
//        
// DSWE categories:
// 0 - Not Water
// 1 - Water - High Confidence
// 2 - Water - Moderate Confidence
// 3 - Partial Surface Water Pixel
// 4 - Water or wetland, low confidence
// 9 - Cloud, Cloud Shadow, or Snow  
// null - Fill (no data) ** currently left masked
//
// ----------------------------------------------------------------------
// Notes:
//
// This script uses the Albers Equal Conic projection (EPSG 5070) which
// is a proxy for the Albers projection used for the Landsat ARD product. 
// ----------------------------------------------------------------------

// --------------------------------------------------------------------------------------- //

// ----------------- Input user-required info ---------------------------
// Dates should be within Landsat TM range (Aug 22, 1982 to present)
var startdate = ee.Date('2000-08-01');
var enddate = ee.Date('2000-10-31');
// ----------------------------------------------------------------------

// ----------------------------------------------------------------------
// Define AOI 
// ----------------------------------------------------------------------
// CA's Central Valley
// Imported from CSoulard asset directory
var aoi = ee.FeatureCollection("users/csoulard/WBDHU8_Central_Valley_Dissolve");

// ----------------------------------------------------------------------
// Import DEM 
// ----------------------------------------------------------------------

var dem = ee.Image("USGS/NED");

// ----------------------------------------------------------------------
// Load Landsat imagery 
// ----------------------------------------------------------------------

// Define Landsat surface reflectance bands
var sensor_band_dict = ee.Dictionary({
                        l8 : ee.List([1,2,3,4,5,6,10]),
                        l7 : ee.List([0,1,2,3,4,6,9]),
                        l5 : ee.List([0,1,2,3,4,6,9]),
                        l4 : ee.List([0,1,2,3,4,6,9])  
                        });
// Sensor band names corresponding to selected band numbers                        
var bandNames = ee.List(['blue','green','red','nir','swir1','swir2','pixel_qa']);

// ------------------------------------------------------
// Landsat 4 - Data availability Aug 22, 1982 - Dec 14, 1993
var ls4 = ee.ImageCollection('LANDSAT/LT04/C01/T1_SR')
              .filterBounds(aoi.geometry())
              .select(sensor_band_dict.get('l4'), bandNames); 

// ------------------------------------------------------
// Landsat 5 - Data availability Jan 1, 1984 - May 5, 2012
var ls5 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
              .filterBounds(aoi.geometry())
              .select(sensor_band_dict.get('l5'), bandNames); 

// Landsat 7 data are only used during operational SLC and
// to fill the gap between the end of LS5 and the beginning
// of LS8 data collection

// Prior to SLC-off            
// -------------------------------------------------------
// Landsat 7 - Data availability Jan 1, 1999 - Aug 9, 2016
// SLC-off after 31 May 2003
var ls7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR') 
              .filterDate('1999-01-01', '2003-05-31') 
              .filterBounds(aoi.geometry())
              .select(sensor_band_dict.get('l7'), bandNames);
        
// Post SLC-off; fill the LS 5 gap
// -------------------------------------------------------
// Landsat 7 - Data availability Jan 1, 1999 - Aug 9, 2016
// SLC-off after 31 May 2003
var ls7_2 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR') 
              .filterDate('2012-05-05', '2014-04-11') 
              .filterBounds(aoi.geometry())
              .select(sensor_band_dict.get('l7'), bandNames);
         
// --------------------------------------------------------
// Landsat 8 - Data availability Apr 11, 2014 - present
var ls8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')  
              .filterBounds(aoi.geometry())
              .select(sensor_band_dict.get('l8'), bandNames);
            
// Merge landsat collections
var l4578 = ee.ImageCollection(ls4
              .merge(ls5)
              .merge(ls7)
              .merge(ls7_2)
              .merge(ls8).sort('system:time_start'))
              .filterDate(startdate, enddate);
              
// ----------------------------------------------------------------------
// Mask clouds, cloud shadows, and snow
// ----------------------------------------------------------------------
// https://landsat.usgs.gov/sites/default/files/documents/ledaps_product_guide.pdf
function maskClouds(img) {
  var qa = img.select(['pixel_qa']);
  var clouds = qa.bitwiseAnd(8).neq(0).or // Cloud shadow (0 = clear, 1 = contamination)
              (qa.bitwiseAnd(16).neq(0)).or // Snow
              (qa.bitwiseAnd(32).neq(0)); // Cloud
  return img.addBands(clouds.rename('clouds')); // Add band of contaminated pixels
}

// Apply mask
var img_masked = l4578.map(maskClouds); //.map(function(img){return img.clip(aoi)});

//print(img_masked.limit(10))


// ----------------------------------------------------------------------
// Calculate hillshade mask
// ----------------------------------------------------------------------
function addHillshade(img) {
    var solar_azimuth = img.get('SOLAR_AZIMUTH_ANGLE');
    var solar_zenith = img.get('SOLAR_ZENITH_ANGLE'); 
    var solar_altitude = ee.Number(90).subtract(ee.Number(solar_zenith)); // solar altitude = 90-zenith
   return img.addBands(ee.Terrain.hillshade(dem, solar_azimuth, solar_altitude).rename('hillshade')); 
}

// Add hillshade bands
var img_hillshade = img_masked.map(addHillshade);


// ----------------------------------------------------------------------
// Calculate DSWE indices
// ----------------------------------------------------------------------
function addIndices(img){
// NDVI 
    img = img.addBands(img.normalizedDifference(['nir', 'red']).select([0], ['ndvi']));

// MNDWI (Modified Normalized Difference Wetness Index) = (Green - SWIR1) / (Green + SWIR1)
    img = img.addBands(img.normalizedDifference(['green', 'swir1']).select([0], ['mndwi']));

// MBSRV (Multi-band Spectral Relationship Visible) = Green + Red
    img = img.addBands(img.select('green').add(img.select('red')).select([0], ['mbsrv'])).toFloat();

// MBSRN (Multi-band Spectral Relationship Near-Infrared) = NIR + SWIR1
    img = img.addBands(img.select('nir').add(img.select('swir1')).select([0], ['mbsrn']).toFloat());

// AWEsh (Automated Water Extent Shadow) = Blue + (2.5 * Green) + (-1.5 * mbsrn) + (-0.25 * SWIR2)
    img = img.addBands(img.expression('blue + (2.5 * green) + (-1.5 * mbsrn) + (-0.25 * swir2)', {
         'blue': img.select('blue'),
         'green': img.select('green'),
         'mbsrn': img.select('mbsrn'),
         'swir2': img.select('swir2')
    }).select([0], ['awesh'])).toFloat();     
    return img;
}

// Add indices
var img_indices = img_hillshade.map(addIndices);


// ----------------------------------------------------------------------
// DSWE parameter testing
// ----------------------------------------------------------------------

// Bitmask of 11111 = 16 + 8 + 4 + 2 + 1 = 31 = 1F in hex 

// 1. ========== Function: test MNDWI ===========
// If (MNDWI > 0.124) set the ones digit (i.e., 00001)
function test_mndwi(img) {
  var mask = img.select('mndwi').gt(0.124);
  return img.addBands(mask
            .bitwiseAnd(0x1F)  
            .rename('mndwi_bit'));
}

// 2. ======== Function: compare MBSRV and MBSRN ========
// If (MBSRV > MBSRN) set the tens digit (i.e., 00010)
function test_mbsrv_mbsrn(img) {
  var mask = img.select('mbsrv').gt(img.select('mbsrn'));
  return img.addBands(mask
            .bitwiseAnd(0x1F) 
            .leftShift(1)  // shift left 1 space
            .rename('mbsrn_bit'));   
}

// 3. ======== Function: test AWEsh ========
// If (AWEsh > 0.0) set the hundreds digit (i.e., 00100)
function test_awesh(img) {
  var mask = img.select('awesh').gt(0.0);
  return img.addBands(mask
              .bitwiseAnd(0x1F)
              .leftShift(2)  // shift left 2 spaces
              .rename('awesh_bit'));  
}

// 4. ======= Function: test PSW1 ========
// If (MNDWI > -0.44 && SWIR1 < 900 && NIR < 1500 & NDVI < 0.7) set the thousands digit (i.e., 01000)
function test_mndwi_swir1_nir(img) {
  var mask = img.select('mndwi').gt(-0.44)
              .and(img.select('swir1').lt(900))
              .and(img.select('nir').lt(1500))
              .and(img.select('ndvi').lt(0.7));
  return img.addBands(mask            
            .bitwiseAnd(0x1F)
            .leftShift(3)  // shift left 3 spaces
            .rename('swir1_bit')); 
}

// 5. ======= Function: test PSW2 =========
// If (MNDWI > -0.5 && SWIR1 < 3000 && SWIR2 < 1000 && NIR < 2500 && Blue < 1000) set the ten-thousands digit (i.e., 10000)
function test_mndwi_swir2_nir(img){
  var mask = img.select('mndwi').gt(-0.5)
              .and(img.select('swir1').lt(3000))
              .and(img.select('swir2').lt(1000))
              .and(img.select('nir').lt(2500))
              .and(img.select('blue').lt(1000));
  return img.addBands(mask
              .bitwiseAnd(0x1F)
              .leftShift(4)  // shift left 4 spaces
              .rename('swir2_bit'));  
}

// Add all bitwise bands to image collection
img_indices_bit = ee.ImageCollection(img_indices)
              .map(test_mndwi)
              .map(test_mbsrv_mbsrn)
              .map(test_awesh)
              .map(test_mndwi_swir1_nir)
              .map(test_mndwi_swir2_nir);

// Function: consolidate individual bit bands
function sum_bit_bands(img){
  var bands = img.select(['mndwi_bit', 'mbsrn_bit', 'awesh_bit', 'swir1_bit', 'swir2_bit']);
  var summed_bands = bands.reduce(ee.Reducer.bitwiseOr());
  return img.addBands(summed_bands.rename('summed_bit_band'));
}

// Add individual bit bands to image collection and summarize
var img_indices_bit = ee.ImageCollection(img_indices)
              .map(test_mndwi)
              .map(test_mbsrv_mbsrn)
              .map(test_awesh)
              .map(test_mndwi_swir1_nir)
              .map(test_mndwi_swir2_nir)
              .map(sum_bit_bands);

// ----------------------------------------------------------------------
// Produce DSWE layers
// ----------------------------------------------------------------------

// Construct slope image from DEM
var slope = ee.Terrain.slope(dem);

// Remap based on JJones key
var img_indices_remap = img_indices_bit.map(function(img){
  var reclass = img.select('summed_bit_band').remap([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                                            10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                                            20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
                                            30, 31],
                                            
                                            [0, 0, 0, 4, 0, 4, 4, 2, 0, 4,
                                             4, 2, 4, 2, 2, 1, 4, 4, 4, 2,
                                             4, 2, 2, 1, 3, 2, 2, 1, 2, 1, 
                                             1, 1]).rename('dswe');
                                             
// ID cloud-contaminated pixels                                           
  reclass = reclass.where(img.select('clouds').eq(1), 9);  
// ID shaded areas
  reclass = reclass.where(img.select('hillshade').lte(110), 8);
// ID slopes
  reclass = reclass.where(img.select('dswe').eq(4) && slope.gte(5.71).or  // 10% slope = 5.71°
              (img.select('dswe').eq(3) && slope.gte(11.31)).or           // 20% slope = 11.31°
              (slope.gte(16.7)), 0);                                      // 30% slope = 16.7°

  return img.addBands(reclass).select('dswe');
});

//print('img indices remap ', img_indices_remap.limit(10));

// How to treat 0 in a composite.
// Zero (no water) represents either 1) a temporary lack of water (i.e., water could be in that pixel
// on a different date) or 2) a terrain-determined impossibility (i.e., water cannot exist there because 
// of the slope).
// For the former, a pixel could be 0 and any other class in a given month. We want 0 to take precedence 
// over 8 and 9 but yield to 1-4.
// For the latter, a pixel could only be 0 in a given month, since slope negates any other condition. Thus it 
// doesn't matter what priority level it takes because it will always evaluate to a zero. 
// Thus the priority of classes for compositing will be [1-4,0,8,9].

// To set the correct order, temporarily remap 0 to 5.
var img_indices_all = img_indices_remap.map(function(img){
  img = img.where(img.lt(1), 5);
  return img;
});

// ----------------------------------------------------------------------
// Create monthly composites
// ----------------------------------------------------------------------

// Generate sequence of months
var months_diff = enddate.difference(startdate, 'month'); // # of months between start and end
var months = ee.List.sequence(0, months_diff.int()); 

// Standardize start date to first of that month; i.e., 08-13-2000 --> 08-01-2000
var start_year = startdate.get('year');
var start_month = startdate.get('month');
var start_date = ee.Date.fromYMD(start_year, start_month, 1);

// Cycle through all months. Using a "min" reducer means that higher-confidence 
// water categories take precedence over lower/partial ones, while water or no-water categories 
// dominate cloudy pixels. Adding an empty band is necessary because GEE triggers
// an error if an image can't be returned, and in some months there are no
// images due to the gap between Landsat 5 and 8. Reclass can be toggled here to separate as a 
// unique class (8) or be folded into the general 'unknown' category (9).
var dswe_ic = ee.ImageCollection.fromImages(months.map(function(m){
  var start = start_date.advance(m, 'month'); // Advance start date by m months
  var end = start.advance(1, 'month');        // End date is start month +1 
  return img_indices_all.filterDate(start, end) 
          .select(['dswe'])
          .reduce(ee.Reducer.min()) //  Produces band 'dswe_min'
          .set('date', start.format("YYYYMM")) // Sets yr/mo as property 'date'
          .cast({'dswe': 'uint8'})  // Adds empty band 'dswe'
          .remap([5,1,2,3,4,8,9], [0,1,2,3,4,9,9]).rename('dswe'); // remap takes the 1st band unless otherwise
                                                         // specified. If 'dswe_min' exists, that's the
                                                         // 1st one. If 'dswe' is the only band, it is
                                                         // converted to the same type as true min bands
                                                         // but is empty. In either case, a band is
                                                         // produced. 
                                                         // Remap 5 back to 0 to preserve no-water as 0
}));                                                      

// ----------------------------------------------------------------------
// Transform image collection to multi-band image for output
// ----------------------------------------------------------------------

function appendBand(current, previous){
  // Build a name for the band (here, "dswe_YYYYMM")
  var bandName = ee.Algorithms.String(current.bandNames().get(0)).cat('_').cat(current.get('date'));
  // Rename the band
  current = current.select([0], [bandName]);
  // Append it to the result (only returns current item on first element/iteration)
  var accum = ee.Algorithms.If(ee.Algorithms.IsEqual(previous, null), current, current.addBands(ee.Image(previous)));
  // Return the accumulation
  return accum;
}

// Iterate through the image collection
var dswe_i = ee.Image(dswe_ic.iterate(appendBand));

// ----------------------------------------------------------------------
// Export image
// ----------------------------------------------------------------------

// Using crs and crsTransform rather than scale is recommended for aligning Landsat pixels
  Export.image.toAsset({
    image: dswe_i, 
    description: 'DSWE2_1984_2016_monthly_images_5070xform',
    crs: 'EPSG:5070',  // USGS Albers Equal Area Conic
    crsTransform: [30,0,-2265585,0,-30,2114805], // transform from EROS projection
    maxPixels: 1e13,
    region: aoi.geometry().bounds(),  // bounds is necessary for geometrically large or complex regions
  });


// ----------------------------------------------------------------------
// Visualization of DSWE Image Products
// ----------------------------------------------------------------------

// Center on polgon
Map.centerObject(aoi, 10);
Map.addLayer(aoi, {}, 'aoi');

// Viz parameters: classes: 0, 1, 2, 3, 4, 9
var dswe_viz = {min:0, max: 9, palette: ['000000', '002ba1', '6287ec', '77b800', 'c1bdb6', '000000', '000000',
                                   '000000', '000000', 'ffffff']};
var ls_viz =  {bands: [ 'red', 'green', 'blue'], min:0, max:3000, gamma: [0.95, 1.1, 1]};

//Map.addLayer(img_hillshade.first().select('hillshade'), {min: 0, max: 255}, 'hillshade')
//Map.addLayer(dem, {min: 0, max: 5000}, 'dem')

// DSWE image (not composited)
Map.addLayer(ee.Image(img_indices_all.select('dswe').first()), dswe_viz, "DSWE");

// DSWE monthly composite image (from image collection)
Map.addLayer(dswe_ic.first().select('dswe'), dswe_viz, "DSWE composite");

// Landsat data. Useful for spot-checking data and compositing results
Map.addLayer(ee.Image(img_indices.first()), ls_viz, 'Landsat');
//var img2 = ee.Image(img_indices.filterMetadata('system:index', 'equals', '1_1_2_LE07_042033_20000609').first())
//Map.addLayer(img2, ls_viz, 'ls');
//print('img2', img2)


